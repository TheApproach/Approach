<?php

namespace Approach\Render\MariaDB;

use \Approach\Render\Node;

/**
 * This class was generated by Approach\Imprint::Mint()
 * It can be used to create a new Render tree based on the original Pattern
 */
class find extends Node
{
	private $pick_block;
	private $weight_block;
	private $source_block;
	private $sift_block;
	private $sort_block;
	private $divide_block;

	public function __construct(
		$picks = [],
		$weights = [],
		$needs = [],
		$source = 'default_source'
	)
	{
		$this->pick_block = self::pick($picks);
		$this->weight_block = self::weigh($weights);
		$this->source_block = new Node( 'FROM '.$source );
		$this->sift_block = self::sift($needs);
		$this->sort_block = new Node('ORDER BY `calculated_priority` DESC;' . PHP_EOL);
		$this->divide_block = new Node();

		$this->nodes[] = &$this->pick_block;
		$this->nodes[] = &$this->weight_block;
		$this->nodes[] = &$this->source_block;
		$this->nodes[] = &$this->sift_block;
		$this->nodes[] = &$this->sort_block;
	}

	public static function pick($picks = []){
		$pick_block = new Node(content: 'SELECT ');
		$pick_block->content .= empty($picks) ?
			'*' :
			implode(', ', $picks);
		return $pick_block;
	}

	public static function sift($needs = []){
		$sift_block = new Node(' WHERE calculated_priority > 0 AND ( ');

		if (!empty($needs)) {
			foreach ($needs as $aspect) {
				$sift_block->content .= PHP_EOL . $aspect['field'] . ' ' . $aspect['operator'] . ' ' . $aspect['value'] . ' AND ';
			}
			// Get rid of trailing "AND "
			$sift_block->content = substr($sift_block->content, 0, -4) . PHP_EOL . ')';
			$sift_block->content .= PHP_EOL . ')' . PHP_EOL;
		} else {
			$sift_block->content .= 'TRUE )' . PHP_EOL;
		}
		return $sift_block;
	}

	public static function weigh($weights = [])
	{
		$weigh_cases = '';
		if (!empty($weights)) {
			$weigh_cases = ', (case ';
			foreach ($weights as $aspect) {
				$weigh_cases .= PHP_EOL .
					'when ' . $aspect['field'] . ' ' . $aspect['operator'] . ' ' . $aspect['value'] . ' then ' . $aspect['weight'];
			}
			$weigh_cases .= PHP_EOL . 'else 1' . PHP_EOL . 'end) as calculated_priority';
		} else {
			$weigh_cases = ', 1 as calculated_priority ';
		}

		return new Node($weigh_cases);
	}
}