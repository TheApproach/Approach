<?php
namespace MyProject\Imprint\MariaDB\locate;
use \MyProject\Render as ProjectRender;
use \Approach\Render;
	
	/**
	* This class was generated by Approach\Imprint::Mint()
	* It can be used to create a new Render tree based on the original Pattern
	*/
	class locate extends Render\Node
	{
	public static array $tokens = [
		
	];
	public array $token_nodes = [];
	
	public function __construct(array $tokens = [])
	{
		$qry = new Render\Node( );
			$qry[] = $Node_1 = new Render\Node(content: 'SELECT ');
			$this->token_nodes['picks'] = new Render\Token(name: 'picks');
			$qry[] = &$this->token_nodes['picks'];
			if(empty($tokens['picks'])){
				$tokens['picks'] = '*';
			}

		$case_block='';
		if( !empty($tokens['weight_aspects']) ){
			$case_block = new Render\Node(content: ', (case ');
			foreach($tokens['weight_aspects'] as $aspect){
				$case_block->content.= PHP_EOL.
					'when '.$aspect['field'].' '.$aspect['operator'].' '.$aspect['value'].' then '.$aspect['weight'];
			}
			$case_block->content .= PHP_EOL.'else 1'.PHP_EOL.'end) as calculated_priority';
		}
		else{
			$case_block = ', 1 as calculated_priority ';
		}
		$qry[]= $case_node = new Render\Node($case_block);

		$this->token_nodes['aspects'] = new Render\Token(name: 'aspects');
		$qry[] = $Loop_0 = new Render\Loop(what: $this->token_nodes['aspects']);


		$from = new Render\Node(' FROM ');
		$this->token_nodes['source'] = new Render\Token(name: 'source');
		$from[] = &$this->token_nodes['source'];
		$qry[] = &$from;

		$where = new Render\Node(' WHERE calculated_priority > 0 AND ( ');

		$need_block = new Render\Node('');
		if (!empty($tokens['needs'])) {
			foreach ($tokens['needs'] as $aspect) {
				$need_block->content .= PHP_EOL.$aspect['field'].' '.$aspect['operator'].' '.$aspect['value'] . ' AND ';
			}
			// Get rid of trailing "AND "
			$need_block->content = substr($need_block->content, 0, -4) . PHP_EOL.')';
			$need_block->content .= PHP_EOL . ')'.PHP_EOL;
		} else {
			$need_block = 'TRUE )'. PHP_EOL;
		}

		$qry[] = $need_block;
		// TO DO: Incorporate sort and divide here
		$qry[] = new Render\Node('ORDER BY `calculated_priority` DESC;'.PHP_EOL);

		$where[] = &$this->token_nodes['source'];
		$qry[] = &$where;

		foreach($tokens as $key => $value){
			$this->token_nodes[$key]->content = $tokens[$key] ?? '';
		}
		$this->nodes[] = $qry;
	}
}
/*
FROM [@ source @] 
WHERE 
		calculated_priority &gt; 0
		AND
		(
			TRUE
		)

ORDER BY 
	calculated_priority desc;
*/







/* COMPLETED >>>

SELECT [@ picks @]
	<!-- node Render:type="IfTrue" condition="[@ weight_aspects @]" -->
	, (case
		<node render:type="Loop" what="[@ weight_aspects @]" as="aspect">
			when [@ aspect.field @] [@ aspect.operator @] [@ aspect.value @] then [@ aspect.weight @]
		</node>
		else 1
		end), as calculated_priority
	<!-- /node -->
	
	
*/